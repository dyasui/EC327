
## Market Entry Game
Consider this variation on the Entry Game, in which the Entrant is not as efficient as the Incumbent:

:::: {.columns}

::: {.column width="50%"}
![](figures/08InferiorEntrant.png)
:::

::: {.column width="50%"}

| Entrant, Incumbent | $Fight$ | $Accom.$ |
|--------------------+---------+----------|
| **$Enter$**        | -1, 1   | 1, 2     |
| **$Out$**          | 0, 3    | 0, 3     |

:::
::::

  * Note that this game has two NEs: (Enter, Accommodate) and (Out, Fight). 
  * Does it really make sense for the Incumbent to ever Fight?


---

## Refining Nash Equilibrium

::: {.incremental}

* The more you think about it, the less sense this Nash equilibrium makes.

   + Entrant would stay Out if they really, truly believe that if they Entered,
    the Incumbent would Fight.
  
   + ... but it's hard to justify that belief when Fighting is costly for the Incumbent.

* The Incumbent would have to somehow convince the Entrant that they really would Fight them, 
  + perhaps by making a [credible threat]{.hi}.

* We will talk more about this kind of [strategic move]{.hi} later in the course.
* We often don't want this kind of Nash Equilibrium.
  To rule it out, we have the concept of [subgame perfection]{.hi}.
:::
---

## Subgames

::: {.incremental}

* A [subgame]{.hi} is a subset of an extensive-form game which, itself, 
  is a complete game.

* A subgame is a **single node**,
  and all of the branches and nodes descending from it,

  + so it forms a **complete game** by itself

:::

---

## Examples of Subgames
Each of these green boxes contains a subgame.

![](figures/06SubgameExample01.png)

---

## Examples of Subgames
Each of these green boxes contains a subgame.

::: {.incremental}
* The smaller boxes are [trivial subgames]{.hi}, because they don't contain any meaningful choices.
:::

![](figures/06SubgameExample02.png)

---

## Examples of Subgames
A game is, technically, a subgame of itself, but it is an [improper subgame]{.hi}. 

  * (Any subgames other than the entire game are [proper subgames]{.hi}.)

![](figures/06SubgameExample03.png)

---

## Subgame Perfection

So why do we care about subgames?

::: {.incremental}

  * [subgame-perfect Nash equilibrium]{.hi} (*aka SPNE*), that does not produce the questionable equilibria we saw earlier.
  * All SPNE are also regular Nash equilibria.
  * But unique to SPNE, they have to also produce a Nash equilibrium **in every subgame**
:::
---

## SPNE in the Entry Game

:::: {.columns}

::: {.columns width="50%"}
![](figures/08InferiorEntrant.png)
:::

::: {.columns width="50%"}
* There is only a single proper subgame in the Entry Game.
* A SPNE of this game must have a NE in that subgame.
* The only NE of the subgame is for the Incumbent to Accommodate.
::: 

::::

---

## SPNE in the Entry Game

::::: {.columns}

:::: {.columns width="50%"}
![](figures/08InferiorEntrant.png)
::::

:::: {.columns width="50%"}
::: {.incremental}
* Given that the Incumbent Accommodates, the Entrant now faces a choice between staying Out, or Entering and being Accommodated.
* The Entrant's best response is to Enter, and the SPNE is (Enter, Accommodate)
:::

:::: 

---

## Rationality and Subgame Perfection

::: {.incremental}
  * To justify looking for SPNEs instead of NEs, we assume [commonly known sequential rationality]{.hi}. 
    + Players are aware that other players are sequentially rational.
    + Knowing that other players are sequentially rational, each player can predict the others' rational behavior and chooses an action with the highest payoff **at each of their decision nodes**.
  * Sequentially rational players choose their strategy on the fly, one move at a time, instead of all at once at the beginning of the game.
:::
---

## Finding SPNEs: Backward Induction
The method for finding SPNEs is straightforward---we've already been using it without spelling it out formally.

::: {.incremental}
  1. Find all the decision nodes in the **lowest row** (assuming the tree goes top down)
  1. Find the optimal choice at each of these nodes, mark the corresponding branch (or erase/cross out all the other branches).
  1. If you just solved the game's initial node, you're done! 
  1. Otherwise, identify all of the decision nodes in the **next row up** and return to step 2.

At each step, remember to take into account the optimal moves that you've already found lower in the tree.
:::
