---
name: GameTrees
---

# Extensive Form

## Game Trees/Extensive Form as a tool

  * Before we learn how to solve a game, it will helpful to be able to visualize them

  * Because of the ordered nature of sequential games, a [tree diagram]{.hi} makes sense

---

## A *Decision* Tree

::: {#fig-decisiontree .test-class}
```{.tikz embed_mode="link" scale=3 format="svg"}
\tikzstyle{solid node}=[circle,draw,inner sep=1.5,fill=black]
\tikzstyle{hollow node}=[circle,draw,inner sep=1.5]
\tikzstyle{level 1}=[level distance=15mm,sibling distance=3.5cm]
\tikzstyle{level 2}=[level distance=15mm,sibling distance=1.5cm]
\tikzstyle{level 3}=[level distance=15mm,sibling distance=1cm]

\node(0)[solid node,label=above:{$P1$}]{}
    child{node[solid node,label=above left:{$P2$}]{}
        child{node[hollow node,label=below:{$(1,2)$}]{} edge from parent node[left]{$C$}}
        child{node[hollow node,label=below:{$(1,-1)$}]{} edge from parent node[left]{$D$}}
        child{node[hollow node,label=below:{$(0,2)$}]{} edge from parent node[right]{$E$}}
        edge from parent node[left,xshift=-5]{$A$}
    }
    child{node[solid node,label=above right:{$P2$}]{}
        child{node[hollow node,label=below:{$(2,2)$}]{} edge from parent node[left]{$F$}}
        child{node[hollow node,label=below:{$(1,3)$}]{} edge from parent node[right]{$G$}}
        edge from parent node[right,xshift=5]{$B$}
    };
```
:::

::: {notes}
  - 
:::

---

## Extensive Form Definition

:::{.incremental}

A [Tree Graph]{.h} consists of:

  * Multiple [nodes]{.hi} with an ordered hierarchy starting from one [initial node]{.hii}

  * [Branches]{.hi} coming from each node which connect it to later nodes

  * The tree ends in any of the multiple [terminal nodes]{.hi}
  
::: {.callout-warning}
Each (non-initial) terminal node may have multiple branches leading from it; 
but must only have *one* branch that *leads to it*.
:::

:::

---

## Anatomy of a tree

![](figures/tree-nodes.png){width=80% fig-align="center"}

---

## Anatomy of a tree

![](figures/tree-branches.png){width=80% fig-align="center"}

---

## Anatomy of a tree

![](figures/tree-terminalnodes.png){width=80% fig-align="center"}

---

## Kidnapping Game ^[Harrington, pg 18]

A kidnapper named [Guy]{.hi} has contacted the victim's wife, named [Vivica]{.hi}, to demand a ransom.

To predict what will happen to the victim, [Orlando]{.hi}, we need to create a game theoretic model of the situation.

Let's use the language of the tree graph to visualize this game.

::: {notes}
  - Draw game on chalkboard step-by-step so students see how it's constructed
  - Explain order of each action for each node,
  starting w/ inital choice to kidnap or not
:::

---

### Kidnapping Game

![](figures/kidnapgame_blank.png){fig-align="center"}

---

## Applying the Extensive Form

::: {.incremental}

  * Who are the players?
  
  * Where are the decisions?
  
  * What are the branches? What do they represent?
  
  * What do the terminal nodes represent?
  
  * Is this a *complete* representation of a game? What's missing?

:::

---

## Kidnapping Game payoffs

| **Outcome**                                    | [**Guy**]{.red}   | [**Vivica**]{.blue}   |
| ---------------------------------------------- | ----------------- | --------------------- |
| No kidnapping                                  | [3]{.red}         | [5]{.blue}            |
| Kidnapping, ransom paid, Orlando killed        | [4]{.red}         | [1]{.blue}            |
| Kidnapping, ransom paid, Orlando released      | [5]{.red}         | [3]{.blue}            |
| Kidnapping, no ransom paid, Orlando killed     | [2]{.red}         | [2]{.blue}            |
| Kidnapping, no ransom paid, Orlando released   | [1]{.red}         | [4]{.blue}            |
---

## Kidnapping game tree with payoffs

![](figures/kidnapgame.png){fig-align="center"}

---

## Predictions?

Based on the extensive form game tree with payoffs,
do you have any predictions for what strategies each player will choose?

---


## a Definition of an Extensive Form Game: ^[for finite, perfect information games]

  * A collection of decision-makers, called [players]{.hi} or *agents*
  
  * A set of [decision nodes]{.hi}, each of which represents the information available to the player of that node
  
  * [Branches]{.hi} from each node which represent the possible actions available to the players
  
  * The entire game tree serves as the [mapping]{.h} from intersections of players' strategy profiles to the outcomes at each [terminal nodes]{.hi}
  
---

## Strategies in Extensive Form Games

::: {.incremental}

::: {.callout-tip}
## Definition
A [strategy]{.hi} is a **complete plan of action** 
for every eventuality
:::

::: {.callout-warning}
Be careful to distinguish between a [*strategy*]{.hi} and a single *action/choice*
:::

What's the difference?

:::

---

## Apply this definition to the kidnapping game:

  * How many choices does Guy make? 
  
::: {.fragment .fade-in}
3
:::
  
  * Vivica?
  
::: {.fragment .fade-in}
1
:::
  
  * Write out a strategy list for each player:
  
---

## Write out a strategy for each player

::: {.incremental}
_[Guy]{.h}_: 

  * ***\{***[*Kidnap*]{.hii}***,*** [*Kill*]{.hii} if ransom paid***,*** [*Don't Kill*]{.hii} if no ransom paid***\}*** is *one* strategy
  
    + Guy has $8$ total strategies:
    
    + **\{**[*Kidnap*]{.hii}, [*Kill*]{.hii}, [*Kill*]{.hii}**\}**, 
    **\{**[*Kidnap*]{.hii}, [*Kill*]{.hii}, [*Don't*]{.hii}**\}**,
    **\{**[*Kidnap*]{.hii}, [*Don't*]{.hii}, [*Kill*]{.hii}**\}**,
    **\{**[*Kidnap*]{.hii}, [*Don't*]{.hii}, [*Don't*]{.hii}\}, 
    **\{**[*No Kidnap*]{.hii}, [*Kill*]{.hii}, [*Kill*]{.hii}**\}**,
    **\{**[*No Kidnap*]{.hii}, [*Kill*]{.hii}, [*Don't*]{.hii}**\}**,
    **\{**[*No Kidnap*]{.hii}, [*Kill*]{.hii}, [*Kill*]{.hii}**\}**,
    **\{**[*Kidnap*]{.hii}, [*Don't*]{.hii}, [*Kill*]{.hii}**\}**
  
_[Vivica]{.h}_:

  * Only two strategies: ***\{***[*Pay*]{.hii} the ransom***\}***, or
  ***\{***[*Don't*]{.hii} pay***\}***
  
:::

---

## Letting Nature take the wheel

One way to represent risk or uncertainty is to represent **Nature** as a 'player'.

![figures/doubleornothing.png](figures/doubleornothing.png)


